// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.23.4
// source: model/server.proto

package model

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MiddlemanClient is the client API for Middleman service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MiddlemanClient interface {
	PSI(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	SendData(ctx context.Context, in *MicrosvcDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type middlemanClient struct {
	cc grpc.ClientConnInterface
}

func NewMiddlemanClient(cc grpc.ClientConnInterface) MiddlemanClient {
	return &middlemanClient{cc}
}

func (c *middlemanClient) PSI(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/model.Middleman/PSI", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *middlemanClient) SendData(ctx context.Context, in *MicrosvcDataRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/model.Middleman/SendData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MiddlemanServer is the server API for Middleman service.
// All implementations must embed UnimplementedMiddlemanServer
// for forward compatibility
type MiddlemanServer interface {
	PSI(context.Context, *Request) (*Response, error)
	SendData(context.Context, *MicrosvcDataRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedMiddlemanServer()
}

// UnimplementedMiddlemanServer must be embedded to have forward compatible implementations.
type UnimplementedMiddlemanServer struct {
}

func (UnimplementedMiddlemanServer) PSI(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PSI not implemented")
}
func (UnimplementedMiddlemanServer) SendData(context.Context, *MicrosvcDataRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendData not implemented")
}
func (UnimplementedMiddlemanServer) mustEmbedUnimplementedMiddlemanServer() {}

// UnsafeMiddlemanServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MiddlemanServer will
// result in compilation errors.
type UnsafeMiddlemanServer interface {
	mustEmbedUnimplementedMiddlemanServer()
}

func RegisterMiddlemanServer(s grpc.ServiceRegistrar, srv MiddlemanServer) {
	s.RegisterService(&Middleman_ServiceDesc, srv)
}

func _Middleman_PSI_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlemanServer).PSI(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Middleman/PSI",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlemanServer).PSI(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Middleman_SendData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MicrosvcDataRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MiddlemanServer).SendData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/model.Middleman/SendData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MiddlemanServer).SendData(ctx, req.(*MicrosvcDataRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Middleman_ServiceDesc is the grpc.ServiceDesc for Middleman service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Middleman_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "model.Middleman",
	HandlerType: (*MiddlemanServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PSI",
			Handler:    _Middleman_PSI_Handler,
		},
		{
			MethodName: "SendData",
			Handler:    _Middleman_SendData_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "model/server.proto",
}
